<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\QueryBuilder;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
	public function myFindAll(){
		// Méthode 1 : en passant par l'entitymanager
		// Dans un repo, $this->_entityName est le namespace de l'entité gérée ici
		$queryBuilder = $this->_em->createQueryBuilder()->select('a')->from($this->_entityName,'a');
		// Méthode 2 : en passant par le raccourci, recommandé 
		$queryBuilder = $this->createQueryBuilder('a');
		// get Query à partir du QueryBuider
		$query = $queryBuilder->getQuery();
		// get Result à partir de la query
		$results = $query->getResult();
		return $results;
	}
	
	
	public function myFindAllDQL(){
		$query = $this->_em->createQuery('SELECT a from OCPlatformBundle:Advert a');
		$results = $query->getResult();
		return $results;
	}
	
	
	public function myFindOne($id){
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.id = :id')->setParameter('id', $id);
		return $qb->getQuery()->getResult();
	}
	
	public function findByAuthorAndDate($author, $year){
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.author = :author')->setParameter('author', $author)
			->andWhere('a.date < :year')->setParameter('year', $year)
			->orderBy('a.date', 'DESC');
		return $qb->getQuery()->getResult();	
	}
	
	public function whereCurrentYear(QueryBuilder $qb){
		$qb->andWhere('a.date BETWEEN :start AND :end')
			->setParameter('start', new \Datetime(date('Y').'-01-01'))
			->setParameter('end', new \Datetime(date('Y').'-12-31'));
	}
	
	
	public function myFind(){
		$qb = $this->createQueryBuilder('a');
		$qb->where('a.author = :author')->setParameter('author', 'Admin');
		$this->whereCurrentYear($qb);
		$qb->orderBy('a.date', 'DESC');
		return $qb->getQuery()->getResult();	
	}
	
	
	public function getAdvertWithApplications(){
		// On ne peut faire une jointure que si l'entité du From possède un attribut vers l'entité à joindre
		$qb = $this->createQueryBuilder('a')->leftJoin('a.applications','app')->addSelect('app');
		return $qb->getQuery()->getResult();
	}
	
	
	public function getAdvertWithCategories(string $categoryName){
		$qb = $this->createQueryBuilder('a');
		//$qb->innerJoin('a.categories','cat','WITH','cat.name = "'.$categoryName.'"')->addSelect('cat');
		$qb->innerJoin('a.categories','cat')->addSelect('cat');
		$qb->where('cat.name = :name')->setParameter('name' , $categoryName);
		//$qb->where($qb->expr()->in('cat.name', $categoryName));
		return $qb->getQuery()->getResult();
	}

}
