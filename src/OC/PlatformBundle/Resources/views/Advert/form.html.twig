
{# src/OC/PlatformBundle/Resources/views/Advert/form.html.twig #}

<h3>Formulaire d'annonce</h3>
{# Form : {{ checkIfSpam('testtes') }} #}
{# On laisse vide la vue pour l'instant, on la comblera plus tard lorsqu'on saura afficher un formulaire. #}
<div class="well">
    {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}
	
	{# Les erreurs générales du formulaire. #}
	{{ form_errors(form) }}
	{# {{advert.id}} #}
	{% if form.date is defined %}
		{# Génération du label + error + widget pour un champ. #}
		{{ form_row(form.date) }}
	{% endif %}
	{# Génération manuelle et éclatée : #}
	  <div class="form-group">
 		{#  Génération du label. #}
		{{ form_label(form.title, "Titre de l'annonce", {'label_attr': {'class': 'col-sm-2 control-label'}}) }} 

		{# Affichage des erreurs pour ce champ précis. #}
		{{ form_errors(form.title) }}

		<div class="col-sm-10">
		  {# Génération de l'input. #}
		  {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
		</div>
	  </div>
	    {# Idem pour un autre champ. #}

	  <div class="form-group">
		{{ form_label(form.content, "Contenu de l'annonce", {'label_attr': {'class': 'col-sm-2 control-label'}}) }}
		{{ form_errors(form.title) }}
		<div class="col-sm-10">
		  {{ form_widget(form.content, {'attr': {'class': 'form-control'}}) }}
		</div>
	  </div>
		{# Bloc to custom render balise #}
	    <!-- 1er méthode -->
		{# {% form_theme form _self %}
		{% block integer_widget %}
			<!-- <div class='integer_widget'>
				{% set type = type|default('number') %}
				{{ block('field_widget') }}
				<input type="{{ type }}" {{ block('widget_attributes') }} value={% if advert.nbApplications is defined %}"{{ advert.nbApplications }}" {% endif %} />
			</div> -->
		{% endblock integer_widget %}#}
		{# END Bloc to custom render balise #}
		<!-- 2eme méthode -->
		{# {% form_theme form 'AmineBundle:Form:fields.html.twig' %} #}
		{# {{ form_row(form.nbApplications)}} #}

		{{ form_row(form.author) }}
		{% if form.pubished is defined %}
			{{ form_row(form.published) }}
		{% endif %}
		<div class="well">
			{{ form_row(form.image) }} 
			{% if advert is defined %}
				{% if advert.image is not null %}
					<img src="{{ asset(advert.image.getWebPath) }}" alt="{{ advert.image.alt }}" >
				{% endif %}
			{% endif %}
		</div>
		<div class="well">
			{{ form_label(form.advertskilles) }}
			<ul class="tags" data-prototype="{{ form_widget(form.advertskilles.vars.prototype)|e('html_attr') }}"> 
			<!-- <ul class="tags">  -->
			</ul> 
		
			
		</div>
		{# Génération automatique des champs pas encore écrits.
			Dans cet exemple, ce serait le champ CSRF (géré automatiquement par Symfony !)
			et tous les champs cachés (type « hidden »). #}
		{{ form_rest(form) }}

		{# Pour le bouton, pas de label ni d'erreur, on affiche juste le widget #}
		{{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}}) }}

		{# Fermeture de la balise <form> du formulaire HTML #}
		{{ form_end(form) }}
</div>
{# On charge la bibliothèque jQuery. Ici, je la prends depuis le CDN google
   mais si vous l'avez en local, changez simplement l'adresse. #}
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

{# Voici le script en question : #}
<script type="text/javascript">
 
	var $collectionHolder;

	// setup an "add a tag" link
	var $addTagLink = $('<a href="#" class="add_tag_link">Add a Skill</a>');
	var $newLinkLi = $('<li></li>').append($addTagLink);

	jQuery(document).ready(function() {
		// Get the ul that holds the collection of tags
		$collectionHolder = $('ul.tags');

		// add the "add a tag" anchor and li to the tags ul
		$collectionHolder.append($newLinkLi);

		$collectionHolder.find('li').each(function() {
			addCategoryFormDeleteLink($(this));

		});

		// count the current form inputs we have (e.g. 2), use that as the new
		// index when inserting a new item (e.g. 2)
		$collectionHolder.data('index', $collectionHolder.find(':input').length);

		// Managing  Update 
		if($('#advert_edit_advertskilles > .form-group').length > 0) {
			var $collectionlistas = $('#advert_edit_advertskilles > .form-group');
			for (var i=0; i<$collectionlistas.length; i++ ) {
			      	$collectionlistas.find('#advert_edit_advertskilles_'+i+'').each(function( index ) {
		        	     	var $node = $(this).find('#advert_edit_advertskilles_'+i+'_skill').val();
					$(this).append('<a href="#" data-node="'+$node+'" class="relation" >Delete this Element</a>')
			        });
			}
		}
		

		$addTagLink.on('click', function(e) {
			// prevent the link from creating a "#" on the URL
			e.preventDefault();
			// add a new tag form (see next code block)
			addCategoryForm($collectionHolder, $newLinkLi);
		});
		// click delete button element
		var $link = $('.relation');
		$link.on('click', function(e) {
			e.preventDefault();
			$node = $(this).data('node');
			$idAdvert = $('#advert_edit_advertId').val();
			//call method ajax
			ajaxCall($node, $idAdvert, $(this));
		});
	});

	// Ajax traitement 
	function ajaxCall($node, $idAdvert, $thisElement) {
		$.ajax({
			url: "{{path('oc_platform_delete_element')}}",
			method: "post",
			beforeSend: function() { $thisElement.html('En charge ...') },
			data: {id: $node, idAdvert: $idAdvert},
			success: function(json){
				$thisElement.parent().hide();
				$thisElement.parent().remove();
				$('#advert_edit_advertskilles').load();
			}
		});
	}

	function addCategoryForm($collectionHolder, $newLinkLi) {
		// Get the data-prototype explained earlier
		var prototype = $collectionHolder.data('prototype');

		// get the new index
		var index = $collectionHolder.data('index');
		// Managin the cas of update action
		if($('#advert_edit_advertskilles > .form-group').length > 0) {
			index = $('#advert_edit_advertskilles > .form-group').length;
			// Replace '__name__' in the prototype's HTML to
			// instead be a number based on how many items we have
			var newForm = prototype.replace(/__name__/g, index);
			// increase the index with one for the next item
			$collectionHolder.data('index', index + 1);
		} else {
			// Replace '__name__' in the prototype's HTML to
			// instead be a number based on how many items we have
			var newForm = prototype.replace(/__name__/g, index);
			// increase the index with one for the next item
			$collectionHolder.data('index', index + 1);
		}
		// Display the form in the page in an li, before the "Add a tag" link li
		var $newFormLi = $('<li></li>').append(newForm);
		$newLinkLi.before($newFormLi);
		addCategoryFormDeleteLink($newFormLi);
	}
	function addCategoryFormDeleteLink($tagFormLi) {
		var $removeFormA = $('<a href="#"> Delete this skill</a>');
		$tagFormLi.append($removeFormA);
		$removeFormA.on('click', function(e) {
			// prevent the link from creating a "#" on the URL
			e.preventDefault();
			// remove the li for the tag form
			$tagFormLi.remove();
		});
	}
	
</script>
